Terminals unused in grammar

    INSTANCEOF


Grammar

    0 $accept: start $end

    1 start: main_program

    2 nested_id: ID '.' nested_id
    3          | ID

    4 opt_var_access: '.' var
    5               | %empty

    6 var: ID opt_array opt_var_access

    7 type: nested_id opt_array_type

    8 opt_array_type: ARRAY opt_array_type
    9               | %empty

   10 opt_array: '[' expression ']' opt_array
   11          | %empty

   12 equality_operator: EQ
   13                  | NEQ

   14 order_operator: '<'
   15               | '>'
   16               | LEQ
   17               | GEQ

   18 shift_operator: UNSIGNED_RIGHT_SHIFT
   19               | LEFT_SHIFT
   20               | RIGHT_SHIFT

   21 multiplicative_operator: '*'
   22                        | '/'
   23                        | '%'

   24 additive_operator: '+'
   25                  | '-'

   26 logical_operator: LOGICAL_AND
   27                 | LOGICAL_OR

   28 bitwise_operator: '&'
   29                 | '^'
   30                 | '|'

   31 binary_operator: equality_operator
   32                | order_operator
   33                | shift_operator
   34                | logical_operator
   35                | bitwise_operator
   36                | additive_operator
   37                | multiplicative_operator

   38 unary_operator: '!'
   39               | '+'
   40               | '-'
   41               | '~'

   42 opt_unary_operator: unary_operator
   43                   | %empty

   44 unary_special_operator: INCREMENT
   45                       | DECREMENT

   46 fn_call: var '(' args ')' opt_array

   47 opt_var_fn_access: '.' var_fn
   48                  | %empty

   49 var_fn: var
   50       | fn_call opt_var_fn_access

   51 val: var_fn
   52    | TRUE
   53    | FALSE
   54    | INTEGER
   55    | REAL
   56    | CHARACTER
   57    | STRING opt_string_access

   58 opt_string_access: '.' var_fn
   59                  | %empty

   60 assignment_operator: '='
   61                    | SELF_UNSIGNED_RIGHT_SHIFT
   62                    | SELF_RIGHT_SHIFT
   63                    | SELF_LEFT_SHIFT
   64                    | SELF_PLUS
   65                    | SELF_MINUS
   66                    | SELF_TIMES
   67                    | SELF_DIV
   68                    | SELF_MOD
   69                    | SELF_BITWISE_AND
   70                    | SELF_BITWISE_OR
   71                    | SELF_BITWISE_XOR

   72 expression: opt_unary_operator val binary_operator expression
   73           | opt_unary_operator val
   74           | opt_unary_operator '(' expression ')' opt_array
   75           | opt_unary_operator '(' expression ')' opt_array binary_operator expression

   76 statement_s0: ID statement_s1
   77             | '(' expression ')' opt_array
   78             | new_expression
   79             | unary_special_operator var

   80 statement_s1: var_declarations
   81             | '.' ID statement_s1
   82             | '[' expression ']' opt_array statement_s2
   83             | ARRAY var_declarations
   84             | '(' args ')' opt_array statement_s2
   85             | assignment
   86             | binary_operator expression
   87             | unary_special_operator
   88             | %empty

   89 rhs: assignment
   90    | binary_operator expression

   91 statement_s2: '.' val rhs
   92             | rhs
   93             | %empty

   94 new_expression: NEW nested_id new_initialisation

   95 new_initialisation: '(' args ')'
   96                   | '[' expression ']' opt_array opt_array_type
   97                   | ARRAY opt_array_type '{' args '}'

   98 assignable_expression: new_expression
   99                      | expression

  100 obligatory_args: assignable_expression
  101                | assignable_expression ',' obligatory_args

  102 args: obligatory_args
  103     | %empty

  104 opt_variadic: MORE_ARGS
  105             | %empty

  106 obligatory_formal_args: type ID opt_array_type ',' obligatory_formal_args
  107                       | type ID opt_array_type opt_variadic

  108 formal_args: obligatory_formal_args
  109            | %empty

  110 opt_assignment: '=' assignable_expression
  111               | %empty

  112 var_declarations: ID opt_array_type opt_assignment ',' var_declarations
  113                 | ID opt_array_type opt_assignment

  114 statement_declarative: type var_declarations

  115 assignment: assignment_operator expression
  116           | '=' new_expression

  117 assignment_statement: var assignment

  118 statement_pm_1: unary_special_operator var
  119               | var unary_special_operator

  120 statement: statement_s0 ';'
  121          | for_statement
  122          | range_for_statement
  123          | if_statement
  124          | while_statement
  125          | do_while_statement
  126          | switch_statement
  127          | return_statement ';'
  128          | ';'
  129          | error ';'

  130 opt_statement_seq: statement_seq
  131                  | %empty

  132 statement_seq: statement opt_statement_seq
  133              | '{' statement_seq '}' opt_statement_seq
  134              | '{' '}' opt_statement_seq

  135 block: '{' opt_statement_seq '}'

  136 condition: expression

  137 conditional_body: statement
  138                 | block

  139 opt_else_statement: ELSE conditional_body
  140                   | %empty

  141 if_statement: IF '(' condition ')' conditional_body opt_else_statement
  142             | IF '(' error ')' conditional_body opt_else_statement

  143 for_updating_statement: statement_pm_1
  144                       | assignment_statement

  145 for_statement: FOR '(' statement_declarative ';' expression ';' for_updating_statement ')' conditional_body

  146 range_for_statement: FOR '(' type ID ':' val ')' conditional_body
  147                    | FOR '(' error ')' conditional_body

  148 while_statement: WHILE '(' condition ')' conditional_body

  149 do_while_statement: DO '{' statement_seq '}' WHILE '(' condition ')' ';'
  150                   | DO '{' statement_seq '}' WHILE '(' error ')' ';'

  151 switch_statement: SWITCH '(' condition ')' '{' switch_body '}'

  152 case_val: INTEGER
  153         | TRUE
  154         | FALSE
  155         | CHARACTER

  156 switch_label: CASE case_val
  157             | DEFAULT

  158 case_block: switch_label ':' opt_statement_seq

  159 switch_body: case_block switch_body
  160            | %empty

  161 opt_return_expression: new_expression
  162                      | expression
  163                      | %empty

  164 return_statement: RETURN opt_return_expression

  165 cls_modifier: PUBLIC
  166             | %empty

  167 cls_attr_more: ',' ID opt_assignment cls_attr_more
  168              | ';'
  169              | error ';'

  170 cls_attr_sign: opt_assignment cls_attr_more
  171              | '(' formal_args ')' block
  172              | '(' error ')' block

  173 fn_access_modifier: PRIVATE
  174                   | PUBLIC
  175                   | PROTECTED

  176 fn_static_modifier: STATIC

  177 fn_opt_static_modifier: fn_static_modifier
  178                       | %empty

  179 fn_opt_access_modifier: fn_access_modifier
  180                       | %empty

  181 fn_modifier: fn_access_modifier fn_opt_static_modifier
  182            | fn_static_modifier fn_opt_access_modifier
  183            | %empty

  184 fn_declaration: fn_modifier type ID '(' formal_args ')'
  185               | fn_modifier type ID '(' error ')'

  186 cls_declaration: cls_modifier CLASS ID
  187                | cls_modifier CLASS error

  188 cls_info_opt_more: cls_info
  189                  | %empty

  190 cls_info: ABSTRACT fn_declaration ';' cls_info_opt_more
  191         | fn_modifier type ID cls_attr_sign cls_info_opt_more
  192         | ';' cls_info_opt_more

  193 opt_cls_info: cls_info
  194             | %empty

  195 opt_extends: EXTENDS nested_id
  196            | %empty

  197 more_interface_list: ',' interface_list
  198                    | %empty

  199 interface_list: nested_id more_interface_list

  200 opt_implements: IMPLEMENTS interface_list
  201               | %empty

  202 cls_definition: cls_declaration opt_extends opt_implements '{' opt_cls_info '}'
  203               | cls_declaration error '{' opt_cls_info '}'

  204 opt_abstract: ABSTRACT
  205             | %empty

  206 interface_info: opt_abstract fn_declaration ';' interface_info
  207               | ';'
  208               | error ';'
  209               | error block

  210 opt_interface_info: interface_info
  211                   | %empty

  212 interface_declaration: cls_modifier INTERFACE ID
  213                      | cls_modifier INTERFACE error

  214 opt_interface_extends: EXTENDS interface_list
  215                      | %empty

  216 interface_definition: interface_declaration opt_interface_extends '{' opt_interface_info '}'
  217                     | interface_declaration error '{' opt_interface_info '}'

  218 opt_pkg_declaration: PACKAGE nested_id ';'
  219                    | %empty

  220 pkg_import: IMPORT nested_id ';' pkg_import
  221           | %empty

  222 type_definitions: interface_definition type_definitions_more
  223                 | cls_definition type_definitions_more

  224 type_definitions_more: type_definitions
  225                      | %empty

  226 main_program: opt_pkg_declaration pkg_import type_definitions


Terminals, with rules where they appear

    $end (0) 0
    '!' (33) 38
    '%' (37) 23
    '&' (38) 28
    '(' (40) 46 74 75 77 84 95 141 142 145 146 147 148 149 150 151 171 172 184 185
    ')' (41) 46 74 75 77 84 95 141 142 145 146 147 148 149 150 151 171 172 184 185
    '*' (42) 21
    '+' (43) 24 39
    ',' (44) 101 106 112 167 197
    '-' (45) 25 40
    '.' (46) 2 4 47 58 81 91
    '/' (47) 22
    ':' (58) 146 158
    ';' (59) 120 127 128 129 145 149 150 168 169 190 192 206 207 208 218 220
    '<' (60) 14
    '=' (61) 60 110 116
    '>' (62) 15
    '[' (91) 10 82 96
    ']' (93) 10 82 96
    '^' (94) 29
    '{' (123) 97 133 134 135 149 150 151 202 203 216 217
    '|' (124) 30
    '}' (125) 97 133 134 135 149 150 151 202 203 216 217
    '~' (126) 41
    error (256) 129 142 147 150 169 172 185 187 203 208 209 213 217
    ID (258) 2 3 6 76 81 106 107 112 113 146 167 184 185 186 191 212
    CHARACTER (259) 56 155
    STRING (260) 57
    INCREMENT (261) 44
    DECREMENT (262) 45
    INTEGER (263) 54 152
    REAL (264) 55
    CLASS (265) 186 187
    ARRAY (266) 8 83 97
    RETURN (267) 164
    INTERFACE (268) 212 213
    ABSTRACT (269) 190 204
    STATIC (270) 176
    EXTENDS (271) 195 214
    IMPLEMENTS (272) 200
    IF (273) 141 142
    ELSE (274) 139
    FOR (275) 145 146 147
    WHILE (276) 148 149 150
    DO (277) 149 150
    SWITCH (278) 151
    CASE (279) 156
    DEFAULT (280) 157
    LEFT_SHIFT (281) 19
    RIGHT_SHIFT (282) 20
    UNSIGNED_RIGHT_SHIFT (283) 18
    LEQ (284) 16
    GEQ (285) 17
    NEQ (286) 13
    EQ (287) 12
    SELF_UNSIGNED_RIGHT_SHIFT (288) 61
    SELF_LEFT_SHIFT (289) 63
    SELF_RIGHT_SHIFT (290) 62
    INSTANCEOF (291)
    MORE_ARGS (292) 104
    NEW (293) 94
    LOGICAL_AND (294) 26
    LOGICAL_OR (295) 27
    TRUE (296) 52 153
    FALSE (297) 53 154
    PACKAGE (298) 218
    IMPORT (299) 220
    SELF_PLUS (300) 64
    SELF_MINUS (301) 65
    SELF_DIV (302) 67
    SELF_MOD (303) 68
    SELF_TIMES (304) 66
    SELF_BITWISE_AND (305) 69
    SELF_BITWISE_OR (306) 70
    SELF_BITWISE_XOR (307) 71
    LOWEST (308)
    PUBLIC (309) 165 174
    PRIVATE (310) 173
    PROTECTED (311) 175


Nonterminals, with rules where they appear

    $accept (80)
        on left: 0
    start (81)
        on left: 1
        on right: 0
    nested_id (82)
        on left: 2 3
        on right: 2 7 94 195 199 218 220
    opt_var_access (83)
        on left: 4 5
        on right: 6
    var (84)
        on left: 6
        on right: 4 46 49 79 117 118 119
    type (85)
        on left: 7
        on right: 106 107 114 146 184 185 191
    opt_array_type (86)
        on left: 8 9
        on right: 7 8 96 97 106 107 112 113
    opt_array (87)
        on left: 10 11
        on right: 6 10 46 74 75 77 82 84 96
    equality_operator (88)
        on left: 12 13
        on right: 31
    order_operator (89)
        on left: 14 15 16 17
        on right: 32
    shift_operator (90)
        on left: 18 19 20
        on right: 33
    multiplicative_operator (91)
        on left: 21 22 23
        on right: 37
    additive_operator (92)
        on left: 24 25
        on right: 36
    logical_operator (93)
        on left: 26 27
        on right: 34
    bitwise_operator (94)
        on left: 28 29 30
        on right: 35
    binary_operator (95)
        on left: 31 32 33 34 35 36 37
        on right: 72 75 86 90
    unary_operator (96)
        on left: 38 39 40 41
        on right: 42
    opt_unary_operator (97)
        on left: 42 43
        on right: 72 73 74 75
    unary_special_operator (98)
        on left: 44 45
        on right: 79 87 118 119
    fn_call (99)
        on left: 46
        on right: 50
    opt_var_fn_access (100)
        on left: 47 48
        on right: 50
    var_fn (101)
        on left: 49 50
        on right: 47 51 58
    val (102)
        on left: 51 52 53 54 55 56 57
        on right: 72 73 91 146
    opt_string_access (103)
        on left: 58 59
        on right: 57
    assignment_operator (104)
        on left: 60 61 62 63 64 65 66 67 68 69 70 71
        on right: 115
    expression (105)
        on left: 72 73 74 75
        on right: 10 72 74 75 77 82 86 90 96 99 115 136 145 162
    statement_s0 (106)
        on left: 76 77 78 79
        on right: 120
    statement_s1 (107)
        on left: 80 81 82 83 84 85 86 87 88
        on right: 76 81
    rhs (108)
        on left: 89 90
        on right: 91 92
    statement_s2 (109)
        on left: 91 92 93
        on right: 82 84
    new_expression (110)
        on left: 94
        on right: 78 98 116 161
    new_initialisation (111)
        on left: 95 96 97
        on right: 94
    assignable_expression (112)
        on left: 98 99
        on right: 100 101 110
    obligatory_args (113)
        on left: 100 101
        on right: 101 102
    args (114)
        on left: 102 103
        on right: 46 84 95 97
    opt_variadic (115)
        on left: 104 105
        on right: 107
    obligatory_formal_args (116)
        on left: 106 107
        on right: 106 108
    formal_args (117)
        on left: 108 109
        on right: 171 184
    opt_assignment (118)
        on left: 110 111
        on right: 112 113 167 170
    var_declarations (119)
        on left: 112 113
        on right: 80 83 112 114
    statement_declarative (120)
        on left: 114
        on right: 145
    assignment (121)
        on left: 115 116
        on right: 85 89 117
    assignment_statement (122)
        on left: 117
        on right: 144
    statement_pm_1 (123)
        on left: 118 119
        on right: 143
    statement (124)
        on left: 120 121 122 123 124 125 126 127 128 129
        on right: 132 137
    opt_statement_seq (125)
        on left: 130 131
        on right: 132 133 134 135 158
    statement_seq (126)
        on left: 132 133 134
        on right: 130 133 149 150
    block (127)
        on left: 135
        on right: 138 171 172 209
    condition (128)
        on left: 136
        on right: 141 148 149 151
    conditional_body (129)
        on left: 137 138
        on right: 139 141 142 145 146 147 148
    opt_else_statement (130)
        on left: 139 140
        on right: 141 142
    if_statement (131)
        on left: 141 142
        on right: 123
    for_updating_statement (132)
        on left: 143 144
        on right: 145
    for_statement (133)
        on left: 145
        on right: 121
    range_for_statement (134)
        on left: 146 147
        on right: 122
    while_statement (135)
        on left: 148
        on right: 124
    do_while_statement (136)
        on left: 149 150
        on right: 125
    switch_statement (137)
        on left: 151
        on right: 126
    case_val (138)
        on left: 152 153 154 155
        on right: 156
    switch_label (139)
        on left: 156 157
        on right: 158
    case_block (140)
        on left: 158
        on right: 159
    switch_body (141)
        on left: 159 160
        on right: 151 159
    opt_return_expression (142)
        on left: 161 162 163
        on right: 164
    return_statement (143)
        on left: 164
        on right: 127
    cls_modifier (144)
        on left: 165 166
        on right: 186 187 212 213
    cls_attr_more (145)
        on left: 167 168 169
        on right: 167 170
    cls_attr_sign (146)
        on left: 170 171 172
        on right: 191
    fn_access_modifier (147)
        on left: 173 174 175
        on right: 179 181
    fn_static_modifier (148)
        on left: 176
        on right: 177 182
    fn_opt_static_modifier (149)
        on left: 177 178
        on right: 181
    fn_opt_access_modifier (150)
        on left: 179 180
        on right: 182
    fn_modifier (151)
        on left: 181 182 183
        on right: 184 185 191
    fn_declaration (152)
        on left: 184 185
        on right: 190 206
    cls_declaration (153)
        on left: 186 187
        on right: 202 203
    cls_info_opt_more (154)
        on left: 188 189
        on right: 190 191 192
    cls_info (155)
        on left: 190 191 192
        on right: 188 193
    opt_cls_info (156)
        on left: 193 194
        on right: 202 203
    opt_extends (157)
        on left: 195 196
        on right: 202
    more_interface_list (158)
        on left: 197 198
        on right: 199
    interface_list (159)
        on left: 199
        on right: 197 200 214
    opt_implements (160)
        on left: 200 201
        on right: 202
    cls_definition (161)
        on left: 202 203
        on right: 223
    opt_abstract (162)
        on left: 204 205
        on right: 206
    interface_info (163)
        on left: 206 207 208 209
        on right: 206 210
    opt_interface_info (164)
        on left: 210 211
        on right: 216 217
    interface_declaration (165)
        on left: 212 213
        on right: 216 217
    opt_interface_extends (166)
        on left: 214 215
        on right: 216
    interface_definition (167)
        on left: 216 217
        on right: 222
    opt_pkg_declaration (168)
        on left: 218 219
        on right: 226
    pkg_import (169)
        on left: 220 221
        on right: 220 226
    type_definitions (170)
        on left: 222 223
        on right: 224 226
    type_definitions_more (171)
        on left: 224 225
        on right: 222 223
    main_program (172)
        on left: 226
        on right: 1


State 0

    0 $accept: • start $end

    PACKAGE  shift, and go to state 1

    $default  reduce using rule 219 (opt_pkg_declaration)

    start                go to state 2
    opt_pkg_declaration  go to state 3
    main_program         go to state 4


State 1

  218 opt_pkg_declaration: PACKAGE • nested_id ';'

    ID  shift, and go to state 5

    nested_id  go to state 6


State 2

    0 $accept: start • $end

    $end  shift, and go to state 7


State 3

  226 main_program: opt_pkg_declaration • pkg_import type_definitions

    IMPORT  shift, and go to state 8

    $default  reduce using rule 221 (pkg_import)

    pkg_import  go to state 9


State 4

    1 start: main_program •

    $default  reduce using rule 1 (start)


State 5

    2 nested_id: ID • '.' nested_id
    3          | ID •

    '.'  shift, and go to state 10

    $default  reduce using rule 3 (nested_id)


State 6

  218 opt_pkg_declaration: PACKAGE nested_id • ';'

    ';'  shift, and go to state 11


State 7

    0 $accept: start $end •

    $default  accept


State 8

  220 pkg_import: IMPORT • nested_id ';' pkg_import

    ID  shift, and go to state 5

    nested_id  go to state 12


State 9

  226 main_program: opt_pkg_declaration pkg_import • type_definitions

    PUBLIC  shift, and go to state 13

    $default  reduce using rule 166 (cls_modifier)

    cls_modifier           go to state 14
    cls_declaration        go to state 15
    cls_definition         go to state 16
    interface_declaration  go to state 17
    interface_definition   go to state 18
    type_definitions       go to state 19


State 10

    2 nested_id: ID '.' • nested_id

    ID  shift, and go to state 5

    nested_id  go to state 20


State 11

  218 opt_pkg_declaration: PACKAGE nested_id ';' •

    $default  reduce using rule 218 (opt_pkg_declaration)


State 12

  220 pkg_import: IMPORT nested_id • ';' pkg_import

    ';'  shift, and go to state 21


State 13

  165 cls_modifier: PUBLIC •

    $default  reduce using rule 165 (cls_modifier)


State 14

  186 cls_declaration: cls_modifier • CLASS ID
  187                | cls_modifier • CLASS error
  212 interface_declaration: cls_modifier • INTERFACE ID
  213                      | cls_modifier • INTERFACE error

    CLASS      shift, and go to state 22
    INTERFACE  shift, and go to state 23


State 15

  202 cls_definition: cls_declaration • opt_extends opt_implements '{' opt_cls_info '}'
  203               | cls_declaration • error '{' opt_cls_info '}'

    error    shift, and go to state 24
    EXTENDS  shift, and go to state 25

    IMPLEMENTS  reduce using rule 196 (opt_extends)
    '{'         reduce using rule 196 (opt_extends)

    opt_extends  go to state 26


State 16

  223 type_definitions: cls_definition • type_definitions_more

    PUBLIC  shift, and go to state 13

    $end      reduce using rule 225 (type_definitions_more)
    $default  reduce using rule 166 (cls_modifier)

    cls_modifier           go to state 14
    cls_declaration        go to state 15
    cls_definition         go to state 16
    interface_declaration  go to state 17
    interface_definition   go to state 18
    type_definitions       go to state 27
    type_definitions_more  go to state 28


State 17

  216 interface_definition: interface_declaration • opt_interface_extends '{' opt_interface_info '}'
  217                     | interface_declaration • error '{' opt_interface_info '}'

    error    shift, and go to state 29
    EXTENDS  shift, and go to state 30

    '{'  reduce using rule 215 (opt_interface_extends)

    opt_interface_extends  go to state 31


State 18

  222 type_definitions: interface_definition • type_definitions_more

    PUBLIC  shift, and go to state 13

    $end      reduce using rule 225 (type_definitions_more)
    $default  reduce using rule 166 (cls_modifier)

    cls_modifier           go to state 14
    cls_declaration        go to state 15
    cls_definition         go to state 16
    interface_declaration  go to state 17
    interface_definition   go to state 18
    type_definitions       go to state 27
    type_definitions_more  go to state 32


State 19

  226 main_program: opt_pkg_declaration pkg_import type_definitions •

    $default  reduce using rule 226 (main_program)


State 20

    2 nested_id: ID '.' nested_id •

    $default  reduce using rule 2 (nested_id)


State 21

  220 pkg_import: IMPORT nested_id ';' • pkg_import

    IMPORT  shift, and go to state 8

    $default  reduce using rule 221 (pkg_import)

    pkg_import  go to state 33


State 22

  186 cls_declaration: cls_modifier CLASS • ID
  187                | cls_modifier CLASS • error

    error  shift, and go to state 34
    ID     shift, and go to state 35


State 23

  212 interface_declaration: cls_modifier INTERFACE • ID
  213                      | cls_modifier INTERFACE • error

    error  shift, and go to state 36
    ID     shift, and go to state 37


State 24

  203 cls_definition: cls_declaration error • '{' opt_cls_info '}'

    '{'  shift, and go to state 38


State 25

  195 opt_extends: EXTENDS • nested_id

    ID  shift, and go to state 5

    nested_id  go to state 39


State 26

  202 cls_definition: cls_declaration opt_extends • opt_implements '{' opt_cls_info '}'

    IMPLEMENTS  shift, and go to state 40

    $default  reduce using rule 201 (opt_implements)

    opt_implements  go to state 41


State 27

  224 type_definitions_more: type_definitions •

    $default  reduce using rule 224 (type_definitions_more)


State 28

  223 type_definitions: cls_definition type_definitions_more •

    $default  reduce using rule 223 (type_definitions)


State 29

  217 interface_definition: interface_declaration error • '{' opt_interface_info '}'

    '{'  shift, and go to state 42


State 30

  214 opt_interface_extends: EXTENDS • interface_list

    ID  shift, and go to state 5

    nested_id       go to state 43
    interface_list  go to state 44


State 31

  216 interface_definition: interface_declaration opt_interface_extends • '{' opt_interface_info '}'

    '{'  shift, and go to state 45


State 32

  222 type_definitions: interface_definition type_definitions_more •

    $default  reduce using rule 222 (type_definitions)


State 33

  220 pkg_import: IMPORT nested_id ';' pkg_import •

    $default  reduce using rule 220 (pkg_import)


State 34

  187 cls_declaration: cls_modifier CLASS error •

    $default  reduce using rule 187 (cls_declaration)


State 35

  186 cls_declaration: cls_modifier CLASS ID •

    $default  reduce using rule 186 (cls_declaration)


State 36

  213 interface_declaration: cls_modifier INTERFACE error •

    $default  reduce using rule 213 (interface_declaration)


State 37

  212 interface_declaration: cls_modifier INTERFACE ID •

    $default  reduce using rule 212 (interface_declaration)


State 38

  203 cls_definition: cls_declaration error '{' • opt_cls_info '}'

    ABSTRACT   shift, and go to state 46
    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50
    ';'        shift, and go to state 51

    '}'       reduce using rule 194 (opt_cls_info)
    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 54
    cls_info            go to state 55
    opt_cls_info        go to state 56


State 39

  195 opt_extends: EXTENDS nested_id •

    $default  reduce using rule 195 (opt_extends)


State 40

  200 opt_implements: IMPLEMENTS • interface_list

    ID  shift, and go to state 5

    nested_id       go to state 43
    interface_list  go to state 57


State 41

  202 cls_definition: cls_declaration opt_extends opt_implements • '{' opt_cls_info '}'

    '{'  shift, and go to state 58


State 42

  217 interface_definition: interface_declaration error '{' • opt_interface_info '}'

    error     shift, and go to state 59
    ABSTRACT  shift, and go to state 60
    ';'       shift, and go to state 61

    ID         reduce using rule 205 (opt_abstract)
    STATIC     reduce using rule 205 (opt_abstract)
    PUBLIC     reduce using rule 205 (opt_abstract)
    PRIVATE    reduce using rule 205 (opt_abstract)
    PROTECTED  reduce using rule 205 (opt_abstract)
    '}'        reduce using rule 211 (opt_interface_info)

    opt_abstract        go to state 62
    interface_info      go to state 63
    opt_interface_info  go to state 64


State 43

  199 interface_list: nested_id • more_interface_list

    ','  shift, and go to state 65

    $default  reduce using rule 198 (more_interface_list)

    more_interface_list  go to state 66


State 44

  214 opt_interface_extends: EXTENDS interface_list •

    $default  reduce using rule 214 (opt_interface_extends)


State 45

  216 interface_definition: interface_declaration opt_interface_extends '{' • opt_interface_info '}'

    error     shift, and go to state 59
    ABSTRACT  shift, and go to state 60
    ';'       shift, and go to state 61

    ID         reduce using rule 205 (opt_abstract)
    STATIC     reduce using rule 205 (opt_abstract)
    PUBLIC     reduce using rule 205 (opt_abstract)
    PRIVATE    reduce using rule 205 (opt_abstract)
    PROTECTED  reduce using rule 205 (opt_abstract)
    '}'        reduce using rule 211 (opt_interface_info)

    opt_abstract        go to state 62
    interface_info      go to state 63
    opt_interface_info  go to state 67


State 46

  190 cls_info: ABSTRACT • fn_declaration ';' cls_info_opt_more

    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50

    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 68
    fn_declaration      go to state 69


State 47

  176 fn_static_modifier: STATIC •

    $default  reduce using rule 176 (fn_static_modifier)


State 48

  174 fn_access_modifier: PUBLIC •

    $default  reduce using rule 174 (fn_access_modifier)


State 49

  173 fn_access_modifier: PRIVATE •

    $default  reduce using rule 173 (fn_access_modifier)


State 50

  175 fn_access_modifier: PROTECTED •

    $default  reduce using rule 175 (fn_access_modifier)


State 51

  192 cls_info: ';' • cls_info_opt_more

    ABSTRACT   shift, and go to state 46
    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50
    ';'        shift, and go to state 51

    '}'       reduce using rule 189 (cls_info_opt_more)
    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 54
    cls_info_opt_more   go to state 70
    cls_info            go to state 71


State 52

  181 fn_modifier: fn_access_modifier • fn_opt_static_modifier

    STATIC  shift, and go to state 47

    $default  reduce using rule 178 (fn_opt_static_modifier)

    fn_static_modifier      go to state 72
    fn_opt_static_modifier  go to state 73


State 53

  182 fn_modifier: fn_static_modifier • fn_opt_access_modifier

    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50

    $default  reduce using rule 180 (fn_opt_access_modifier)

    fn_access_modifier      go to state 74
    fn_opt_access_modifier  go to state 75


State 54

  191 cls_info: fn_modifier • type ID cls_attr_sign cls_info_opt_more

    ID  shift, and go to state 5

    nested_id  go to state 76
    type       go to state 77


State 55

  193 opt_cls_info: cls_info •

    $default  reduce using rule 193 (opt_cls_info)


State 56

  203 cls_definition: cls_declaration error '{' opt_cls_info • '}'

    '}'  shift, and go to state 78


State 57

  200 opt_implements: IMPLEMENTS interface_list •

    $default  reduce using rule 200 (opt_implements)


State 58

  202 cls_definition: cls_declaration opt_extends opt_implements '{' • opt_cls_info '}'

    ABSTRACT   shift, and go to state 46
    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50
    ';'        shift, and go to state 51

    '}'       reduce using rule 194 (opt_cls_info)
    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 54
    cls_info            go to state 55
    opt_cls_info        go to state 79


State 59

  208 interface_info: error • ';'
  209               | error • block

    '{'  shift, and go to state 80
    ';'  shift, and go to state 81

    block  go to state 82


State 60

  204 opt_abstract: ABSTRACT •

    $default  reduce using rule 204 (opt_abstract)


State 61

  207 interface_info: ';' •

    $default  reduce using rule 207 (interface_info)


State 62

  206 interface_info: opt_abstract • fn_declaration ';' interface_info

    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50

    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 68
    fn_declaration      go to state 83


State 63

  210 opt_interface_info: interface_info •

    $default  reduce using rule 210 (opt_interface_info)


State 64

  217 interface_definition: interface_declaration error '{' opt_interface_info • '}'

    '}'  shift, and go to state 84


State 65

  197 more_interface_list: ',' • interface_list

    ID  shift, and go to state 5

    nested_id       go to state 43
    interface_list  go to state 85


State 66

  199 interface_list: nested_id more_interface_list •

    $default  reduce using rule 199 (interface_list)


State 67

  216 interface_definition: interface_declaration opt_interface_extends '{' opt_interface_info • '}'

    '}'  shift, and go to state 86


State 68

  184 fn_declaration: fn_modifier • type ID '(' formal_args ')'
  185               | fn_modifier • type ID '(' error ')'

    ID  shift, and go to state 5

    nested_id  go to state 76
    type       go to state 87


State 69

  190 cls_info: ABSTRACT fn_declaration • ';' cls_info_opt_more

    ';'  shift, and go to state 88


State 70

  192 cls_info: ';' cls_info_opt_more •

    $default  reduce using rule 192 (cls_info)


State 71

  188 cls_info_opt_more: cls_info •

    $default  reduce using rule 188 (cls_info_opt_more)


State 72

  177 fn_opt_static_modifier: fn_static_modifier •

    $default  reduce using rule 177 (fn_opt_static_modifier)


State 73

  181 fn_modifier: fn_access_modifier fn_opt_static_modifier •

    $default  reduce using rule 181 (fn_modifier)


State 74

  179 fn_opt_access_modifier: fn_access_modifier •

    $default  reduce using rule 179 (fn_opt_access_modifier)


State 75

  182 fn_modifier: fn_static_modifier fn_opt_access_modifier •

    $default  reduce using rule 182 (fn_modifier)


State 76

    7 type: nested_id • opt_array_type

    ARRAY  shift, and go to state 89

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 90


State 77

  191 cls_info: fn_modifier type • ID cls_attr_sign cls_info_opt_more

    ID  shift, and go to state 91


State 78

  203 cls_definition: cls_declaration error '{' opt_cls_info '}' •

    $default  reduce using rule 203 (cls_definition)


State 79

  202 cls_definition: cls_declaration opt_extends opt_implements '{' opt_cls_info • '}'

    '}'  shift, and go to state 92


State 80

  135 block: '{' • opt_statement_seq '}'

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    ';'        shift, and go to state 106

    '}'  reduce using rule 131 (opt_statement_seq)

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    opt_statement_seq       go to state 111
    statement_seq           go to state 112
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 81

  208 interface_info: error ';' •

    $default  reduce using rule 208 (interface_info)


State 82

  209 interface_info: error block •

    $default  reduce using rule 209 (interface_info)


State 83

  206 interface_info: opt_abstract fn_declaration • ';' interface_info

    ';'  shift, and go to state 120


State 84

  217 interface_definition: interface_declaration error '{' opt_interface_info '}' •

    $default  reduce using rule 217 (interface_definition)


State 85

  197 more_interface_list: ',' interface_list •

    $default  reduce using rule 197 (more_interface_list)


State 86

  216 interface_definition: interface_declaration opt_interface_extends '{' opt_interface_info '}' •

    $default  reduce using rule 216 (interface_definition)


State 87

  184 fn_declaration: fn_modifier type • ID '(' formal_args ')'
  185               | fn_modifier type • ID '(' error ')'

    ID  shift, and go to state 121


State 88

  190 cls_info: ABSTRACT fn_declaration ';' • cls_info_opt_more

    ABSTRACT   shift, and go to state 46
    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50
    ';'        shift, and go to state 51

    '}'       reduce using rule 189 (cls_info_opt_more)
    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 54
    cls_info_opt_more   go to state 122
    cls_info            go to state 71


State 89

    8 opt_array_type: ARRAY • opt_array_type

    ARRAY  shift, and go to state 89

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 123


State 90

    7 type: nested_id opt_array_type •

    $default  reduce using rule 7 (type)


State 91

  191 cls_info: fn_modifier type ID • cls_attr_sign cls_info_opt_more

    '='  shift, and go to state 124
    '('  shift, and go to state 125

    $default  reduce using rule 111 (opt_assignment)

    opt_assignment  go to state 126
    cls_attr_sign   go to state 127


State 92

  202 cls_definition: cls_declaration opt_extends opt_implements '{' opt_cls_info '}' •

    $default  reduce using rule 202 (cls_definition)


State 93

  129 statement: error • ';'

    ';'  shift, and go to state 128


State 94

   76 statement_s0: ID • statement_s1

    ID                         shift, and go to state 129
    INCREMENT                  shift, and go to state 95
    DECREMENT                  shift, and go to state 96
    ARRAY                      shift, and go to state 130
    LEFT_SHIFT                 shift, and go to state 131
    RIGHT_SHIFT                shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT       shift, and go to state 133
    LEQ                        shift, and go to state 134
    GEQ                        shift, and go to state 135
    NEQ                        shift, and go to state 136
    EQ                         shift, and go to state 137
    SELF_UNSIGNED_RIGHT_SHIFT  shift, and go to state 138
    SELF_LEFT_SHIFT            shift, and go to state 139
    SELF_RIGHT_SHIFT           shift, and go to state 140
    LOGICAL_AND                shift, and go to state 141
    LOGICAL_OR                 shift, and go to state 142
    SELF_PLUS                  shift, and go to state 143
    SELF_MINUS                 shift, and go to state 144
    SELF_DIV                   shift, and go to state 145
    SELF_MOD                   shift, and go to state 146
    SELF_TIMES                 shift, and go to state 147
    SELF_BITWISE_AND           shift, and go to state 148
    SELF_BITWISE_OR            shift, and go to state 149
    SELF_BITWISE_XOR           shift, and go to state 150
    '^'                        shift, and go to state 151
    '|'                        shift, and go to state 152
    '&'                        shift, and go to state 153
    '<'                        shift, and go to state 154
    '>'                        shift, and go to state 155
    '-'                        shift, and go to state 156
    '+'                        shift, and go to state 157
    '*'                        shift, and go to state 158
    '/'                        shift, and go to state 159
    '%'                        shift, and go to state 160
    '='                        shift, and go to state 161
    '.'                        shift, and go to state 162
    '['                        shift, and go to state 163
    '('                        shift, and go to state 164

    $default  reduce using rule 88 (statement_s1)

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 172
    unary_special_operator   go to state 173
    assignment_operator      go to state 174
    statement_s1             go to state 175
    var_declarations         go to state 176
    assignment               go to state 177


State 95

   44 unary_special_operator: INCREMENT •

    $default  reduce using rule 44 (unary_special_operator)


State 96

   45 unary_special_operator: DECREMENT •

    $default  reduce using rule 45 (unary_special_operator)


State 97

  164 return_statement: RETURN • opt_return_expression

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    ';'       reduce using rule 163 (opt_return_expression)
    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 184
    new_expression         go to state 185
    opt_return_expression  go to state 186


State 98

  141 if_statement: IF • '(' condition ')' conditional_body opt_else_statement
  142             | IF • '(' error ')' conditional_body opt_else_statement

    '('  shift, and go to state 187


State 99

  145 for_statement: FOR • '(' statement_declarative ';' expression ';' for_updating_statement ')' conditional_body
  146 range_for_statement: FOR • '(' type ID ':' val ')' conditional_body
  147                    | FOR • '(' error ')' conditional_body

    '('  shift, and go to state 188


State 100

  148 while_statement: WHILE • '(' condition ')' conditional_body

    '('  shift, and go to state 189


State 101

  149 do_while_statement: DO • '{' statement_seq '}' WHILE '(' condition ')' ';'
  150                   | DO • '{' statement_seq '}' WHILE '(' error ')' ';'

    '{'  shift, and go to state 190


State 102

  151 switch_statement: SWITCH • '(' condition ')' '{' switch_body '}'

    '('  shift, and go to state 191


State 103

   94 new_expression: NEW • nested_id new_initialisation

    ID  shift, and go to state 5

    nested_id  go to state 192


State 104

   77 statement_s0: '(' • expression ')' opt_array

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 193


State 105

  133 statement_seq: '{' • statement_seq '}' opt_statement_seq
  134              | '{' • '}' opt_statement_seq

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    '}'        shift, and go to state 194
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    statement_seq           go to state 195
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 106

  128 statement: ';' •

    $default  reduce using rule 128 (statement)


State 107

   79 statement_s0: unary_special_operator • var

    ID  shift, and go to state 196

    var  go to state 197


State 108

  120 statement: statement_s0 • ';'

    ';'  shift, and go to state 198


State 109

   78 statement_s0: new_expression •

    $default  reduce using rule 78 (statement_s0)


State 110

  132 statement_seq: statement • opt_statement_seq

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    ';'        shift, and go to state 106

    CASE     reduce using rule 131 (opt_statement_seq)
    DEFAULT  reduce using rule 131 (opt_statement_seq)
    '}'      reduce using rule 131 (opt_statement_seq)

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    opt_statement_seq       go to state 199
    statement_seq           go to state 112
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 111

  135 block: '{' opt_statement_seq • '}'

    '}'  shift, and go to state 200


State 112

  130 opt_statement_seq: statement_seq •

    $default  reduce using rule 130 (opt_statement_seq)


State 113

  123 statement: if_statement •

    $default  reduce using rule 123 (statement)


State 114

  121 statement: for_statement •

    $default  reduce using rule 121 (statement)


State 115

  122 statement: range_for_statement •

    $default  reduce using rule 122 (statement)


State 116

  124 statement: while_statement •

    $default  reduce using rule 124 (statement)


State 117

  125 statement: do_while_statement •

    $default  reduce using rule 125 (statement)


State 118

  126 statement: switch_statement •

    $default  reduce using rule 126 (statement)


State 119

  127 statement: return_statement • ';'

    ';'  shift, and go to state 201


State 120

  206 interface_info: opt_abstract fn_declaration ';' • interface_info

    error     shift, and go to state 59
    ABSTRACT  shift, and go to state 60
    ';'       shift, and go to state 61

    ID         reduce using rule 205 (opt_abstract)
    STATIC     reduce using rule 205 (opt_abstract)
    PUBLIC     reduce using rule 205 (opt_abstract)
    PRIVATE    reduce using rule 205 (opt_abstract)
    PROTECTED  reduce using rule 205 (opt_abstract)

    opt_abstract    go to state 62
    interface_info  go to state 202


State 121

  184 fn_declaration: fn_modifier type ID • '(' formal_args ')'
  185               | fn_modifier type ID • '(' error ')'

    '('  shift, and go to state 203


State 122

  190 cls_info: ABSTRACT fn_declaration ';' cls_info_opt_more •

    $default  reduce using rule 190 (cls_info)


State 123

    8 opt_array_type: ARRAY opt_array_type •

    $default  reduce using rule 8 (opt_array_type)


State 124

  110 opt_assignment: '=' • assignable_expression

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 204
    new_expression         go to state 205
    assignable_expression  go to state 206


State 125

  171 cls_attr_sign: '(' • formal_args ')' block
  172              | '(' • error ')' block

    error  shift, and go to state 207
    ID     shift, and go to state 5

    ')'  reduce using rule 109 (formal_args)

    nested_id               go to state 76
    type                    go to state 208
    obligatory_formal_args  go to state 209
    formal_args             go to state 210


State 126

  170 cls_attr_sign: opt_assignment • cls_attr_more

    error  shift, and go to state 211
    ','    shift, and go to state 212
    ';'    shift, and go to state 213

    cls_attr_more  go to state 214


State 127

  191 cls_info: fn_modifier type ID cls_attr_sign • cls_info_opt_more

    ABSTRACT   shift, and go to state 46
    STATIC     shift, and go to state 47
    PUBLIC     shift, and go to state 48
    PRIVATE    shift, and go to state 49
    PROTECTED  shift, and go to state 50
    ';'        shift, and go to state 51

    '}'       reduce using rule 189 (cls_info_opt_more)
    $default  reduce using rule 183 (fn_modifier)

    fn_access_modifier  go to state 52
    fn_static_modifier  go to state 53
    fn_modifier         go to state 54
    cls_info_opt_more   go to state 215
    cls_info            go to state 71


State 128

  129 statement: error ';' •

    $default  reduce using rule 129 (statement)


State 129

  112 var_declarations: ID • opt_array_type opt_assignment ',' var_declarations
  113                 | ID • opt_array_type opt_assignment

    ARRAY  shift, and go to state 89

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 216


State 130

   83 statement_s1: ARRAY • var_declarations

    ID  shift, and go to state 129

    var_declarations  go to state 217


State 131

   19 shift_operator: LEFT_SHIFT •

    $default  reduce using rule 19 (shift_operator)


State 132

   20 shift_operator: RIGHT_SHIFT •

    $default  reduce using rule 20 (shift_operator)


State 133

   18 shift_operator: UNSIGNED_RIGHT_SHIFT •

    $default  reduce using rule 18 (shift_operator)


State 134

   16 order_operator: LEQ •

    $default  reduce using rule 16 (order_operator)


State 135

   17 order_operator: GEQ •

    $default  reduce using rule 17 (order_operator)


State 136

   13 equality_operator: NEQ •

    $default  reduce using rule 13 (equality_operator)


State 137

   12 equality_operator: EQ •

    $default  reduce using rule 12 (equality_operator)


State 138

   61 assignment_operator: SELF_UNSIGNED_RIGHT_SHIFT •

    $default  reduce using rule 61 (assignment_operator)


State 139

   63 assignment_operator: SELF_LEFT_SHIFT •

    $default  reduce using rule 63 (assignment_operator)


State 140

   62 assignment_operator: SELF_RIGHT_SHIFT •

    $default  reduce using rule 62 (assignment_operator)


State 141

   26 logical_operator: LOGICAL_AND •

    $default  reduce using rule 26 (logical_operator)


State 142

   27 logical_operator: LOGICAL_OR •

    $default  reduce using rule 27 (logical_operator)


State 143

   64 assignment_operator: SELF_PLUS •

    $default  reduce using rule 64 (assignment_operator)


State 144

   65 assignment_operator: SELF_MINUS •

    $default  reduce using rule 65 (assignment_operator)


State 145

   67 assignment_operator: SELF_DIV •

    $default  reduce using rule 67 (assignment_operator)


State 146

   68 assignment_operator: SELF_MOD •

    $default  reduce using rule 68 (assignment_operator)


State 147

   66 assignment_operator: SELF_TIMES •

    $default  reduce using rule 66 (assignment_operator)


State 148

   69 assignment_operator: SELF_BITWISE_AND •

    $default  reduce using rule 69 (assignment_operator)


State 149

   70 assignment_operator: SELF_BITWISE_OR •

    $default  reduce using rule 70 (assignment_operator)


State 150

   71 assignment_operator: SELF_BITWISE_XOR •

    $default  reduce using rule 71 (assignment_operator)


State 151

   29 bitwise_operator: '^' •

    $default  reduce using rule 29 (bitwise_operator)


State 152

   30 bitwise_operator: '|' •

    $default  reduce using rule 30 (bitwise_operator)


State 153

   28 bitwise_operator: '&' •

    $default  reduce using rule 28 (bitwise_operator)


State 154

   14 order_operator: '<' •

    $default  reduce using rule 14 (order_operator)


State 155

   15 order_operator: '>' •

    $default  reduce using rule 15 (order_operator)


State 156

   25 additive_operator: '-' •

    $default  reduce using rule 25 (additive_operator)


State 157

   24 additive_operator: '+' •

    $default  reduce using rule 24 (additive_operator)


State 158

   21 multiplicative_operator: '*' •

    $default  reduce using rule 21 (multiplicative_operator)


State 159

   22 multiplicative_operator: '/' •

    $default  reduce using rule 22 (multiplicative_operator)


State 160

   23 multiplicative_operator: '%' •

    $default  reduce using rule 23 (multiplicative_operator)


State 161

   60 assignment_operator: '=' •
  116 assignment: '=' • new_expression

    NEW  shift, and go to state 103

    $default  reduce using rule 60 (assignment_operator)

    new_expression  go to state 218


State 162

   81 statement_s1: '.' • ID statement_s1

    ID  shift, and go to state 219


State 163

   82 statement_s1: '[' • expression ']' opt_array statement_s2

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 220


State 164

   84 statement_s1: '(' • args ')' opt_array statement_s2

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    ')'       reduce using rule 103 (args)
    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 204
    new_expression         go to state 205
    assignable_expression  go to state 221
    obligatory_args        go to state 222
    args                   go to state 223


State 165

   31 binary_operator: equality_operator •

    $default  reduce using rule 31 (binary_operator)


State 166

   32 binary_operator: order_operator •

    $default  reduce using rule 32 (binary_operator)


State 167

   33 binary_operator: shift_operator •

    $default  reduce using rule 33 (binary_operator)


State 168

   37 binary_operator: multiplicative_operator •

    $default  reduce using rule 37 (binary_operator)


State 169

   36 binary_operator: additive_operator •

    $default  reduce using rule 36 (binary_operator)


State 170

   34 binary_operator: logical_operator •

    $default  reduce using rule 34 (binary_operator)


State 171

   35 binary_operator: bitwise_operator •

    $default  reduce using rule 35 (binary_operator)


State 172

   86 statement_s1: binary_operator • expression

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 224


State 173

   87 statement_s1: unary_special_operator •

    $default  reduce using rule 87 (statement_s1)


State 174

  115 assignment: assignment_operator • expression

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 225


State 175

   76 statement_s0: ID statement_s1 •

    $default  reduce using rule 76 (statement_s0)


State 176

   80 statement_s1: var_declarations •

    $default  reduce using rule 80 (statement_s1)


State 177

   85 statement_s1: assignment •

    $default  reduce using rule 85 (statement_s1)


State 178

   40 unary_operator: '-' •

    $default  reduce using rule 40 (unary_operator)


State 179

   39 unary_operator: '+' •

    $default  reduce using rule 39 (unary_operator)


State 180

   38 unary_operator: '!' •

    $default  reduce using rule 38 (unary_operator)


State 181

   41 unary_operator: '~' •

    $default  reduce using rule 41 (unary_operator)


State 182

   42 opt_unary_operator: unary_operator •

    $default  reduce using rule 42 (opt_unary_operator)


State 183

   72 expression: opt_unary_operator • val binary_operator expression
   73           | opt_unary_operator • val
   74           | opt_unary_operator • '(' expression ')' opt_array
   75           | opt_unary_operator • '(' expression ')' opt_array binary_operator expression

    ID         shift, and go to state 196
    CHARACTER  shift, and go to state 226
    STRING     shift, and go to state 227
    INTEGER    shift, and go to state 228
    REAL       shift, and go to state 229
    TRUE       shift, and go to state 230
    FALSE      shift, and go to state 231
    '('        shift, and go to state 232

    var      go to state 233
    fn_call  go to state 234
    var_fn   go to state 235
    val      go to state 236


State 184

  162 opt_return_expression: expression •

    $default  reduce using rule 162 (opt_return_expression)


State 185

  161 opt_return_expression: new_expression •

    $default  reduce using rule 161 (opt_return_expression)


State 186

  164 return_statement: RETURN opt_return_expression •

    $default  reduce using rule 164 (return_statement)


State 187

  141 if_statement: IF '(' • condition ')' conditional_body opt_else_statement
  142             | IF '(' • error ')' conditional_body opt_else_statement

    error  shift, and go to state 237
    '-'    shift, and go to state 178
    '+'    shift, and go to state 179
    '!'    shift, and go to state 180
    '~'    shift, and go to state 181

    ID         reduce using rule 43 (opt_unary_operator)
    CHARACTER  reduce using rule 43 (opt_unary_operator)
    STRING     reduce using rule 43 (opt_unary_operator)
    INTEGER    reduce using rule 43 (opt_unary_operator)
    REAL       reduce using rule 43 (opt_unary_operator)
    TRUE       reduce using rule 43 (opt_unary_operator)
    FALSE      reduce using rule 43 (opt_unary_operator)
    '('        reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 238
    condition           go to state 239


State 188

  145 for_statement: FOR '(' • statement_declarative ';' expression ';' for_updating_statement ')' conditional_body
  146 range_for_statement: FOR '(' • type ID ':' val ')' conditional_body
  147                    | FOR '(' • error ')' conditional_body

    error  shift, and go to state 240
    ID     shift, and go to state 5

    nested_id              go to state 76
    type                   go to state 241
    statement_declarative  go to state 242


State 189

  148 while_statement: WHILE '(' • condition ')' conditional_body

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 238
    condition           go to state 243


State 190

  149 do_while_statement: DO '{' • statement_seq '}' WHILE '(' condition ')' ';'
  150                   | DO '{' • statement_seq '}' WHILE '(' error ')' ';'

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    statement_seq           go to state 244
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 191

  151 switch_statement: SWITCH '(' • condition ')' '{' switch_body '}'

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 238
    condition           go to state 245


State 192

   94 new_expression: NEW nested_id • new_initialisation

    ARRAY  shift, and go to state 246
    '['    shift, and go to state 247
    '('    shift, and go to state 248

    new_initialisation  go to state 249


State 193

   77 statement_s0: '(' expression • ')' opt_array

    ')'  shift, and go to state 250


State 194

  134 statement_seq: '{' '}' • opt_statement_seq

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    ';'        shift, and go to state 106

    CASE     reduce using rule 131 (opt_statement_seq)
    DEFAULT  reduce using rule 131 (opt_statement_seq)
    '}'      reduce using rule 131 (opt_statement_seq)

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    opt_statement_seq       go to state 251
    statement_seq           go to state 112
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 195

  133 statement_seq: '{' statement_seq • '}' opt_statement_seq

    '}'  shift, and go to state 252


State 196

    6 var: ID • opt_array opt_var_access

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 254


State 197

   79 statement_s0: unary_special_operator var •

    $default  reduce using rule 79 (statement_s0)


State 198

  120 statement: statement_s0 ';' •

    $default  reduce using rule 120 (statement)


State 199

  132 statement_seq: statement opt_statement_seq •

    $default  reduce using rule 132 (statement_seq)


State 200

  135 block: '{' opt_statement_seq '}' •

    $default  reduce using rule 135 (block)


State 201

  127 statement: return_statement ';' •

    $default  reduce using rule 127 (statement)


State 202

  206 interface_info: opt_abstract fn_declaration ';' interface_info •

    $default  reduce using rule 206 (interface_info)


State 203

  184 fn_declaration: fn_modifier type ID '(' • formal_args ')'
  185               | fn_modifier type ID '(' • error ')'

    error  shift, and go to state 255
    ID     shift, and go to state 5

    ')'  reduce using rule 109 (formal_args)

    nested_id               go to state 76
    type                    go to state 208
    obligatory_formal_args  go to state 209
    formal_args             go to state 256


State 204

   99 assignable_expression: expression •

    $default  reduce using rule 99 (assignable_expression)


State 205

   98 assignable_expression: new_expression •

    $default  reduce using rule 98 (assignable_expression)


State 206

  110 opt_assignment: '=' assignable_expression •

    $default  reduce using rule 110 (opt_assignment)


State 207

  172 cls_attr_sign: '(' error • ')' block

    ')'  shift, and go to state 257


State 208

  106 obligatory_formal_args: type • ID opt_array_type ',' obligatory_formal_args
  107                       | type • ID opt_array_type opt_variadic

    ID  shift, and go to state 258


State 209

  108 formal_args: obligatory_formal_args •

    $default  reduce using rule 108 (formal_args)


State 210

  171 cls_attr_sign: '(' formal_args • ')' block

    ')'  shift, and go to state 259


State 211

  169 cls_attr_more: error • ';'

    ';'  shift, and go to state 260


State 212

  167 cls_attr_more: ',' • ID opt_assignment cls_attr_more

    ID  shift, and go to state 261


State 213

  168 cls_attr_more: ';' •

    $default  reduce using rule 168 (cls_attr_more)


State 214

  170 cls_attr_sign: opt_assignment cls_attr_more •

    $default  reduce using rule 170 (cls_attr_sign)


State 215

  191 cls_info: fn_modifier type ID cls_attr_sign cls_info_opt_more •

    $default  reduce using rule 191 (cls_info)


State 216

  112 var_declarations: ID opt_array_type • opt_assignment ',' var_declarations
  113                 | ID opt_array_type • opt_assignment

    '='  shift, and go to state 124

    $default  reduce using rule 111 (opt_assignment)

    opt_assignment  go to state 262


State 217

   83 statement_s1: ARRAY var_declarations •

    $default  reduce using rule 83 (statement_s1)


State 218

  116 assignment: '=' new_expression •

    $default  reduce using rule 116 (assignment)


State 219

   81 statement_s1: '.' ID • statement_s1

    ID                         shift, and go to state 129
    INCREMENT                  shift, and go to state 95
    DECREMENT                  shift, and go to state 96
    ARRAY                      shift, and go to state 130
    LEFT_SHIFT                 shift, and go to state 131
    RIGHT_SHIFT                shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT       shift, and go to state 133
    LEQ                        shift, and go to state 134
    GEQ                        shift, and go to state 135
    NEQ                        shift, and go to state 136
    EQ                         shift, and go to state 137
    SELF_UNSIGNED_RIGHT_SHIFT  shift, and go to state 138
    SELF_LEFT_SHIFT            shift, and go to state 139
    SELF_RIGHT_SHIFT           shift, and go to state 140
    LOGICAL_AND                shift, and go to state 141
    LOGICAL_OR                 shift, and go to state 142
    SELF_PLUS                  shift, and go to state 143
    SELF_MINUS                 shift, and go to state 144
    SELF_DIV                   shift, and go to state 145
    SELF_MOD                   shift, and go to state 146
    SELF_TIMES                 shift, and go to state 147
    SELF_BITWISE_AND           shift, and go to state 148
    SELF_BITWISE_OR            shift, and go to state 149
    SELF_BITWISE_XOR           shift, and go to state 150
    '^'                        shift, and go to state 151
    '|'                        shift, and go to state 152
    '&'                        shift, and go to state 153
    '<'                        shift, and go to state 154
    '>'                        shift, and go to state 155
    '-'                        shift, and go to state 156
    '+'                        shift, and go to state 157
    '*'                        shift, and go to state 158
    '/'                        shift, and go to state 159
    '%'                        shift, and go to state 160
    '='                        shift, and go to state 161
    '.'                        shift, and go to state 162
    '['                        shift, and go to state 163
    '('                        shift, and go to state 164

    $default  reduce using rule 88 (statement_s1)

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 172
    unary_special_operator   go to state 173
    assignment_operator      go to state 174
    statement_s1             go to state 263
    var_declarations         go to state 176
    assignment               go to state 177


State 220

   82 statement_s1: '[' expression • ']' opt_array statement_s2

    ']'  shift, and go to state 264


State 221

  100 obligatory_args: assignable_expression •
  101                | assignable_expression • ',' obligatory_args

    ','  shift, and go to state 265

    $default  reduce using rule 100 (obligatory_args)


State 222

  102 args: obligatory_args •

    $default  reduce using rule 102 (args)


State 223

   84 statement_s1: '(' args • ')' opt_array statement_s2

    ')'  shift, and go to state 266


State 224

   86 statement_s1: binary_operator expression •

    $default  reduce using rule 86 (statement_s1)


State 225

  115 assignment: assignment_operator expression •

    $default  reduce using rule 115 (assignment)


State 226

   56 val: CHARACTER •

    $default  reduce using rule 56 (val)


State 227

   57 val: STRING • opt_string_access

    '.'  shift, and go to state 267

    $default  reduce using rule 59 (opt_string_access)

    opt_string_access  go to state 268


State 228

   54 val: INTEGER •

    $default  reduce using rule 54 (val)


State 229

   55 val: REAL •

    $default  reduce using rule 55 (val)


State 230

   52 val: TRUE •

    $default  reduce using rule 52 (val)


State 231

   53 val: FALSE •

    $default  reduce using rule 53 (val)


State 232

   74 expression: opt_unary_operator '(' • expression ')' opt_array
   75           | opt_unary_operator '(' • expression ')' opt_array binary_operator expression

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 269


State 233

   46 fn_call: var • '(' args ')' opt_array
   49 var_fn: var •

    '('  shift, and go to state 270

    $default  reduce using rule 49 (var_fn)


State 234

   50 var_fn: fn_call • opt_var_fn_access

    '.'  shift, and go to state 271

    $default  reduce using rule 48 (opt_var_fn_access)

    opt_var_fn_access  go to state 272


State 235

   51 val: var_fn •

    $default  reduce using rule 51 (val)


State 236

   72 expression: opt_unary_operator val • binary_operator expression
   73           | opt_unary_operator val •

    LEFT_SHIFT            shift, and go to state 131
    RIGHT_SHIFT           shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT  shift, and go to state 133
    LEQ                   shift, and go to state 134
    GEQ                   shift, and go to state 135
    NEQ                   shift, and go to state 136
    EQ                    shift, and go to state 137
    LOGICAL_AND           shift, and go to state 141
    LOGICAL_OR            shift, and go to state 142
    '^'                   shift, and go to state 151
    '|'                   shift, and go to state 152
    '&'                   shift, and go to state 153
    '<'                   shift, and go to state 154
    '>'                   shift, and go to state 155
    '-'                   shift, and go to state 156
    '+'                   shift, and go to state 157
    '*'                   shift, and go to state 158
    '/'                   shift, and go to state 159
    '%'                   shift, and go to state 160

    $default  reduce using rule 73 (expression)

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 273


State 237

  142 if_statement: IF '(' error • ')' conditional_body opt_else_statement

    ')'  shift, and go to state 274


State 238

  136 condition: expression •

    $default  reduce using rule 136 (condition)


State 239

  141 if_statement: IF '(' condition • ')' conditional_body opt_else_statement

    ')'  shift, and go to state 275


State 240

  147 range_for_statement: FOR '(' error • ')' conditional_body

    ')'  shift, and go to state 276


State 241

  114 statement_declarative: type • var_declarations
  146 range_for_statement: FOR '(' type • ID ':' val ')' conditional_body

    ID  shift, and go to state 277

    var_declarations  go to state 278


State 242

  145 for_statement: FOR '(' statement_declarative • ';' expression ';' for_updating_statement ')' conditional_body

    ';'  shift, and go to state 279


State 243

  148 while_statement: WHILE '(' condition • ')' conditional_body

    ')'  shift, and go to state 280


State 244

  149 do_while_statement: DO '{' statement_seq • '}' WHILE '(' condition ')' ';'
  150                   | DO '{' statement_seq • '}' WHILE '(' error ')' ';'

    '}'  shift, and go to state 281


State 245

  151 switch_statement: SWITCH '(' condition • ')' '{' switch_body '}'

    ')'  shift, and go to state 282


State 246

   97 new_initialisation: ARRAY • opt_array_type '{' args '}'

    ARRAY  shift, and go to state 89

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 283


State 247

   96 new_initialisation: '[' • expression ']' opt_array opt_array_type

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 284


State 248

   95 new_initialisation: '(' • args ')'

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    ')'       reduce using rule 103 (args)
    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 204
    new_expression         go to state 205
    assignable_expression  go to state 221
    obligatory_args        go to state 222
    args                   go to state 285


State 249

   94 new_expression: NEW nested_id new_initialisation •

    $default  reduce using rule 94 (new_expression)


State 250

   77 statement_s0: '(' expression ')' • opt_array

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 286


State 251

  134 statement_seq: '{' '}' opt_statement_seq •

    $default  reduce using rule 134 (statement_seq)


State 252

  133 statement_seq: '{' statement_seq '}' • opt_statement_seq

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    ';'        shift, and go to state 106

    CASE     reduce using rule 131 (opt_statement_seq)
    DEFAULT  reduce using rule 131 (opt_statement_seq)
    '}'      reduce using rule 131 (opt_statement_seq)

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    opt_statement_seq       go to state 287
    statement_seq           go to state 112
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 253

   10 opt_array: '[' • expression ']' opt_array

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 288


State 254

    6 var: ID opt_array • opt_var_access

    '.'  shift, and go to state 289

    $default  reduce using rule 5 (opt_var_access)

    opt_var_access  go to state 290


State 255

  185 fn_declaration: fn_modifier type ID '(' error • ')'

    ')'  shift, and go to state 291


State 256

  184 fn_declaration: fn_modifier type ID '(' formal_args • ')'

    ')'  shift, and go to state 292


State 257

  172 cls_attr_sign: '(' error ')' • block

    '{'  shift, and go to state 80

    block  go to state 293


State 258

  106 obligatory_formal_args: type ID • opt_array_type ',' obligatory_formal_args
  107                       | type ID • opt_array_type opt_variadic

    ARRAY  shift, and go to state 89

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 294


State 259

  171 cls_attr_sign: '(' formal_args ')' • block

    '{'  shift, and go to state 80

    block  go to state 295


State 260

  169 cls_attr_more: error ';' •

    $default  reduce using rule 169 (cls_attr_more)


State 261

  167 cls_attr_more: ',' ID • opt_assignment cls_attr_more

    '='  shift, and go to state 124

    $default  reduce using rule 111 (opt_assignment)

    opt_assignment  go to state 296


State 262

  112 var_declarations: ID opt_array_type opt_assignment • ',' var_declarations
  113                 | ID opt_array_type opt_assignment •

    ','  shift, and go to state 297

    $default  reduce using rule 113 (var_declarations)


State 263

   81 statement_s1: '.' ID statement_s1 •

    $default  reduce using rule 81 (statement_s1)


State 264

   82 statement_s1: '[' expression ']' • opt_array statement_s2

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 298


State 265

  101 obligatory_args: assignable_expression ',' • obligatory_args

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 204
    new_expression         go to state 205
    assignable_expression  go to state 221
    obligatory_args        go to state 299


State 266

   84 statement_s1: '(' args ')' • opt_array statement_s2

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 300


State 267

   58 opt_string_access: '.' • var_fn

    ID  shift, and go to state 196

    var      go to state 233
    fn_call  go to state 234
    var_fn   go to state 301


State 268

   57 val: STRING opt_string_access •

    $default  reduce using rule 57 (val)


State 269

   74 expression: opt_unary_operator '(' expression • ')' opt_array
   75           | opt_unary_operator '(' expression • ')' opt_array binary_operator expression

    ')'  shift, and go to state 302


State 270

   46 fn_call: var '(' • args ')' opt_array

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    ')'       reduce using rule 103 (args)
    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 204
    new_expression         go to state 205
    assignable_expression  go to state 221
    obligatory_args        go to state 222
    args                   go to state 303


State 271

   47 opt_var_fn_access: '.' • var_fn

    ID  shift, and go to state 196

    var      go to state 233
    fn_call  go to state 234
    var_fn   go to state 304


State 272

   50 var_fn: fn_call opt_var_fn_access •

    $default  reduce using rule 50 (var_fn)


State 273

   72 expression: opt_unary_operator val binary_operator • expression

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 305


State 274

  142 if_statement: IF '(' error ')' • conditional_body opt_else_statement

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 308
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 275

  141 if_statement: IF '(' condition ')' • conditional_body opt_else_statement

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 309
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 276

  147 range_for_statement: FOR '(' error ')' • conditional_body

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 310
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 277

  112 var_declarations: ID • opt_array_type opt_assignment ',' var_declarations
  113                 | ID • opt_array_type opt_assignment
  146 range_for_statement: FOR '(' type ID • ':' val ')' conditional_body

    ARRAY  shift, and go to state 89
    ':'    shift, and go to state 311

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 216


State 278

  114 statement_declarative: type var_declarations •

    $default  reduce using rule 114 (statement_declarative)


State 279

  145 for_statement: FOR '(' statement_declarative ';' • expression ';' for_updating_statement ')' conditional_body

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 312


State 280

  148 while_statement: WHILE '(' condition ')' • conditional_body

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 313
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 281

  149 do_while_statement: DO '{' statement_seq '}' • WHILE '(' condition ')' ';'
  150                   | DO '{' statement_seq '}' • WHILE '(' error ')' ';'

    WHILE  shift, and go to state 314


State 282

  151 switch_statement: SWITCH '(' condition ')' • '{' switch_body '}'

    '{'  shift, and go to state 315


State 283

   97 new_initialisation: ARRAY opt_array_type • '{' args '}'

    '{'  shift, and go to state 316


State 284

   96 new_initialisation: '[' expression • ']' opt_array opt_array_type

    ']'  shift, and go to state 317


State 285

   95 new_initialisation: '(' args • ')'

    ')'  shift, and go to state 318


State 286

   77 statement_s0: '(' expression ')' opt_array •

    $default  reduce using rule 77 (statement_s0)


State 287

  133 statement_seq: '{' statement_seq '}' opt_statement_seq •

    $default  reduce using rule 133 (statement_seq)


State 288

   10 opt_array: '[' expression • ']' opt_array

    ']'  shift, and go to state 319


State 289

    4 opt_var_access: '.' • var

    ID  shift, and go to state 196

    var  go to state 320


State 290

    6 var: ID opt_array opt_var_access •

    $default  reduce using rule 6 (var)


State 291

  185 fn_declaration: fn_modifier type ID '(' error ')' •

    $default  reduce using rule 185 (fn_declaration)


State 292

  184 fn_declaration: fn_modifier type ID '(' formal_args ')' •

    $default  reduce using rule 184 (fn_declaration)


State 293

  172 cls_attr_sign: '(' error ')' block •

    $default  reduce using rule 172 (cls_attr_sign)


State 294

  106 obligatory_formal_args: type ID opt_array_type • ',' obligatory_formal_args
  107                       | type ID opt_array_type • opt_variadic

    MORE_ARGS  shift, and go to state 321
    ','        shift, and go to state 322

    $default  reduce using rule 105 (opt_variadic)

    opt_variadic  go to state 323


State 295

  171 cls_attr_sign: '(' formal_args ')' block •

    $default  reduce using rule 171 (cls_attr_sign)


State 296

  167 cls_attr_more: ',' ID opt_assignment • cls_attr_more

    error  shift, and go to state 211
    ','    shift, and go to state 212
    ';'    shift, and go to state 213

    cls_attr_more  go to state 324


State 297

  112 var_declarations: ID opt_array_type opt_assignment ',' • var_declarations

    ID  shift, and go to state 129

    var_declarations  go to state 325


State 298

   82 statement_s1: '[' expression ']' opt_array • statement_s2

    LEFT_SHIFT                 shift, and go to state 131
    RIGHT_SHIFT                shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT       shift, and go to state 133
    LEQ                        shift, and go to state 134
    GEQ                        shift, and go to state 135
    NEQ                        shift, and go to state 136
    EQ                         shift, and go to state 137
    SELF_UNSIGNED_RIGHT_SHIFT  shift, and go to state 138
    SELF_LEFT_SHIFT            shift, and go to state 139
    SELF_RIGHT_SHIFT           shift, and go to state 140
    LOGICAL_AND                shift, and go to state 141
    LOGICAL_OR                 shift, and go to state 142
    SELF_PLUS                  shift, and go to state 143
    SELF_MINUS                 shift, and go to state 144
    SELF_DIV                   shift, and go to state 145
    SELF_MOD                   shift, and go to state 146
    SELF_TIMES                 shift, and go to state 147
    SELF_BITWISE_AND           shift, and go to state 148
    SELF_BITWISE_OR            shift, and go to state 149
    SELF_BITWISE_XOR           shift, and go to state 150
    '^'                        shift, and go to state 151
    '|'                        shift, and go to state 152
    '&'                        shift, and go to state 153
    '<'                        shift, and go to state 154
    '>'                        shift, and go to state 155
    '-'                        shift, and go to state 156
    '+'                        shift, and go to state 157
    '*'                        shift, and go to state 158
    '/'                        shift, and go to state 159
    '%'                        shift, and go to state 160
    '='                        shift, and go to state 161
    '.'                        shift, and go to state 326

    $default  reduce using rule 93 (statement_s2)

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 327
    assignment_operator      go to state 174
    rhs                      go to state 328
    statement_s2             go to state 329
    assignment               go to state 330


State 299

  101 obligatory_args: assignable_expression ',' obligatory_args •

    $default  reduce using rule 101 (obligatory_args)


State 300

   84 statement_s1: '(' args ')' opt_array • statement_s2

    LEFT_SHIFT                 shift, and go to state 131
    RIGHT_SHIFT                shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT       shift, and go to state 133
    LEQ                        shift, and go to state 134
    GEQ                        shift, and go to state 135
    NEQ                        shift, and go to state 136
    EQ                         shift, and go to state 137
    SELF_UNSIGNED_RIGHT_SHIFT  shift, and go to state 138
    SELF_LEFT_SHIFT            shift, and go to state 139
    SELF_RIGHT_SHIFT           shift, and go to state 140
    LOGICAL_AND                shift, and go to state 141
    LOGICAL_OR                 shift, and go to state 142
    SELF_PLUS                  shift, and go to state 143
    SELF_MINUS                 shift, and go to state 144
    SELF_DIV                   shift, and go to state 145
    SELF_MOD                   shift, and go to state 146
    SELF_TIMES                 shift, and go to state 147
    SELF_BITWISE_AND           shift, and go to state 148
    SELF_BITWISE_OR            shift, and go to state 149
    SELF_BITWISE_XOR           shift, and go to state 150
    '^'                        shift, and go to state 151
    '|'                        shift, and go to state 152
    '&'                        shift, and go to state 153
    '<'                        shift, and go to state 154
    '>'                        shift, and go to state 155
    '-'                        shift, and go to state 156
    '+'                        shift, and go to state 157
    '*'                        shift, and go to state 158
    '/'                        shift, and go to state 159
    '%'                        shift, and go to state 160
    '='                        shift, and go to state 161
    '.'                        shift, and go to state 326

    $default  reduce using rule 93 (statement_s2)

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 327
    assignment_operator      go to state 174
    rhs                      go to state 328
    statement_s2             go to state 331
    assignment               go to state 330


State 301

   58 opt_string_access: '.' var_fn •

    $default  reduce using rule 58 (opt_string_access)


State 302

   74 expression: opt_unary_operator '(' expression ')' • opt_array
   75           | opt_unary_operator '(' expression ')' • opt_array binary_operator expression

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 332


State 303

   46 fn_call: var '(' args • ')' opt_array

    ')'  shift, and go to state 333


State 304

   47 opt_var_fn_access: '.' var_fn •

    $default  reduce using rule 47 (opt_var_fn_access)


State 305

   72 expression: opt_unary_operator val binary_operator expression •

    $default  reduce using rule 72 (expression)


State 306

  137 conditional_body: statement •

    $default  reduce using rule 137 (conditional_body)


State 307

  138 conditional_body: block •

    $default  reduce using rule 138 (conditional_body)


State 308

  142 if_statement: IF '(' error ')' conditional_body • opt_else_statement

    ELSE  shift, and go to state 334

    $default  reduce using rule 140 (opt_else_statement)

    opt_else_statement  go to state 335


State 309

  141 if_statement: IF '(' condition ')' conditional_body • opt_else_statement

    ELSE  shift, and go to state 334

    $default  reduce using rule 140 (opt_else_statement)

    opt_else_statement  go to state 336


State 310

  147 range_for_statement: FOR '(' error ')' conditional_body •

    $default  reduce using rule 147 (range_for_statement)


State 311

  146 range_for_statement: FOR '(' type ID ':' • val ')' conditional_body

    ID         shift, and go to state 196
    CHARACTER  shift, and go to state 226
    STRING     shift, and go to state 227
    INTEGER    shift, and go to state 228
    REAL       shift, and go to state 229
    TRUE       shift, and go to state 230
    FALSE      shift, and go to state 231

    var      go to state 233
    fn_call  go to state 234
    var_fn   go to state 235
    val      go to state 337


State 312

  145 for_statement: FOR '(' statement_declarative ';' expression • ';' for_updating_statement ')' conditional_body

    ';'  shift, and go to state 338


State 313

  148 while_statement: WHILE '(' condition ')' conditional_body •

    $default  reduce using rule 148 (while_statement)


State 314

  149 do_while_statement: DO '{' statement_seq '}' WHILE • '(' condition ')' ';'
  150                   | DO '{' statement_seq '}' WHILE • '(' error ')' ';'

    '('  shift, and go to state 339


State 315

  151 switch_statement: SWITCH '(' condition ')' '{' • switch_body '}'

    CASE     shift, and go to state 340
    DEFAULT  shift, and go to state 341

    $default  reduce using rule 160 (switch_body)

    switch_label  go to state 342
    case_block    go to state 343
    switch_body   go to state 344


State 316

   97 new_initialisation: ARRAY opt_array_type '{' • args '}'

    NEW  shift, and go to state 103
    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    '}'       reduce using rule 103 (args)
    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator         go to state 182
    opt_unary_operator     go to state 183
    expression             go to state 204
    new_expression         go to state 205
    assignable_expression  go to state 221
    obligatory_args        go to state 222
    args                   go to state 345


State 317

   96 new_initialisation: '[' expression ']' • opt_array opt_array_type

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 346


State 318

   95 new_initialisation: '(' args ')' •

    $default  reduce using rule 95 (new_initialisation)


State 319

   10 opt_array: '[' expression ']' • opt_array

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 347


State 320

    4 opt_var_access: '.' var •

    $default  reduce using rule 4 (opt_var_access)


State 321

  104 opt_variadic: MORE_ARGS •

    $default  reduce using rule 104 (opt_variadic)


State 322

  106 obligatory_formal_args: type ID opt_array_type ',' • obligatory_formal_args

    ID  shift, and go to state 5

    nested_id               go to state 76
    type                    go to state 208
    obligatory_formal_args  go to state 348


State 323

  107 obligatory_formal_args: type ID opt_array_type opt_variadic •

    $default  reduce using rule 107 (obligatory_formal_args)


State 324

  167 cls_attr_more: ',' ID opt_assignment cls_attr_more •

    $default  reduce using rule 167 (cls_attr_more)


State 325

  112 var_declarations: ID opt_array_type opt_assignment ',' var_declarations •

    $default  reduce using rule 112 (var_declarations)


State 326

   91 statement_s2: '.' • val rhs

    ID         shift, and go to state 196
    CHARACTER  shift, and go to state 226
    STRING     shift, and go to state 227
    INTEGER    shift, and go to state 228
    REAL       shift, and go to state 229
    TRUE       shift, and go to state 230
    FALSE      shift, and go to state 231

    var      go to state 233
    fn_call  go to state 234
    var_fn   go to state 235
    val      go to state 349


State 327

   90 rhs: binary_operator • expression

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 350


State 328

   92 statement_s2: rhs •

    $default  reduce using rule 92 (statement_s2)


State 329

   82 statement_s1: '[' expression ']' opt_array statement_s2 •

    $default  reduce using rule 82 (statement_s1)


State 330

   89 rhs: assignment •

    $default  reduce using rule 89 (rhs)


State 331

   84 statement_s1: '(' args ')' opt_array statement_s2 •

    $default  reduce using rule 84 (statement_s1)


State 332

   74 expression: opt_unary_operator '(' expression ')' opt_array •
   75           | opt_unary_operator '(' expression ')' opt_array • binary_operator expression

    LEFT_SHIFT            shift, and go to state 131
    RIGHT_SHIFT           shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT  shift, and go to state 133
    LEQ                   shift, and go to state 134
    GEQ                   shift, and go to state 135
    NEQ                   shift, and go to state 136
    EQ                    shift, and go to state 137
    LOGICAL_AND           shift, and go to state 141
    LOGICAL_OR            shift, and go to state 142
    '^'                   shift, and go to state 151
    '|'                   shift, and go to state 152
    '&'                   shift, and go to state 153
    '<'                   shift, and go to state 154
    '>'                   shift, and go to state 155
    '-'                   shift, and go to state 156
    '+'                   shift, and go to state 157
    '*'                   shift, and go to state 158
    '/'                   shift, and go to state 159
    '%'                   shift, and go to state 160

    $default  reduce using rule 74 (expression)

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 351


State 333

   46 fn_call: var '(' args ')' • opt_array

    '['  shift, and go to state 253

    $default  reduce using rule 11 (opt_array)

    opt_array  go to state 352


State 334

  139 opt_else_statement: ELSE • conditional_body

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 353
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 335

  142 if_statement: IF '(' error ')' conditional_body opt_else_statement •

    $default  reduce using rule 142 (if_statement)


State 336

  141 if_statement: IF '(' condition ')' conditional_body opt_else_statement •

    $default  reduce using rule 141 (if_statement)


State 337

  146 range_for_statement: FOR '(' type ID ':' val • ')' conditional_body

    ')'  shift, and go to state 354


State 338

  145 for_statement: FOR '(' statement_declarative ';' expression ';' • for_updating_statement ')' conditional_body

    ID         shift, and go to state 196
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96

    var                     go to state 355
    unary_special_operator  go to state 356
    assignment_statement    go to state 357
    statement_pm_1          go to state 358
    for_updating_statement  go to state 359


State 339

  149 do_while_statement: DO '{' statement_seq '}' WHILE '(' • condition ')' ';'
  150                   | DO '{' statement_seq '}' WHILE '(' • error ')' ';'

    error  shift, and go to state 360
    '-'    shift, and go to state 178
    '+'    shift, and go to state 179
    '!'    shift, and go to state 180
    '~'    shift, and go to state 181

    ID         reduce using rule 43 (opt_unary_operator)
    CHARACTER  reduce using rule 43 (opt_unary_operator)
    STRING     reduce using rule 43 (opt_unary_operator)
    INTEGER    reduce using rule 43 (opt_unary_operator)
    REAL       reduce using rule 43 (opt_unary_operator)
    TRUE       reduce using rule 43 (opt_unary_operator)
    FALSE      reduce using rule 43 (opt_unary_operator)
    '('        reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 238
    condition           go to state 361


State 340

  156 switch_label: CASE • case_val

    CHARACTER  shift, and go to state 362
    INTEGER    shift, and go to state 363
    TRUE       shift, and go to state 364
    FALSE      shift, and go to state 365

    case_val  go to state 366


State 341

  157 switch_label: DEFAULT •

    $default  reduce using rule 157 (switch_label)


State 342

  158 case_block: switch_label • ':' opt_statement_seq

    ':'  shift, and go to state 367


State 343

  159 switch_body: case_block • switch_body

    CASE     shift, and go to state 340
    DEFAULT  shift, and go to state 341

    $default  reduce using rule 160 (switch_body)

    switch_label  go to state 342
    case_block    go to state 343
    switch_body   go to state 368


State 344

  151 switch_statement: SWITCH '(' condition ')' '{' switch_body • '}'

    '}'  shift, and go to state 369


State 345

   97 new_initialisation: ARRAY opt_array_type '{' args • '}'

    '}'  shift, and go to state 370


State 346

   96 new_initialisation: '[' expression ']' opt_array • opt_array_type

    ARRAY  shift, and go to state 89

    $default  reduce using rule 9 (opt_array_type)

    opt_array_type  go to state 371


State 347

   10 opt_array: '[' expression ']' opt_array •

    $default  reduce using rule 10 (opt_array)


State 348

  106 obligatory_formal_args: type ID opt_array_type ',' obligatory_formal_args •

    $default  reduce using rule 106 (obligatory_formal_args)


State 349

   91 statement_s2: '.' val • rhs

    LEFT_SHIFT                 shift, and go to state 131
    RIGHT_SHIFT                shift, and go to state 132
    UNSIGNED_RIGHT_SHIFT       shift, and go to state 133
    LEQ                        shift, and go to state 134
    GEQ                        shift, and go to state 135
    NEQ                        shift, and go to state 136
    EQ                         shift, and go to state 137
    SELF_UNSIGNED_RIGHT_SHIFT  shift, and go to state 138
    SELF_LEFT_SHIFT            shift, and go to state 139
    SELF_RIGHT_SHIFT           shift, and go to state 140
    LOGICAL_AND                shift, and go to state 141
    LOGICAL_OR                 shift, and go to state 142
    SELF_PLUS                  shift, and go to state 143
    SELF_MINUS                 shift, and go to state 144
    SELF_DIV                   shift, and go to state 145
    SELF_MOD                   shift, and go to state 146
    SELF_TIMES                 shift, and go to state 147
    SELF_BITWISE_AND           shift, and go to state 148
    SELF_BITWISE_OR            shift, and go to state 149
    SELF_BITWISE_XOR           shift, and go to state 150
    '^'                        shift, and go to state 151
    '|'                        shift, and go to state 152
    '&'                        shift, and go to state 153
    '<'                        shift, and go to state 154
    '>'                        shift, and go to state 155
    '-'                        shift, and go to state 156
    '+'                        shift, and go to state 157
    '*'                        shift, and go to state 158
    '/'                        shift, and go to state 159
    '%'                        shift, and go to state 160
    '='                        shift, and go to state 161

    equality_operator        go to state 165
    order_operator           go to state 166
    shift_operator           go to state 167
    multiplicative_operator  go to state 168
    additive_operator        go to state 169
    logical_operator         go to state 170
    bitwise_operator         go to state 171
    binary_operator          go to state 327
    assignment_operator      go to state 174
    rhs                      go to state 372
    assignment               go to state 330


State 350

   90 rhs: binary_operator expression •

    $default  reduce using rule 90 (rhs)


State 351

   75 expression: opt_unary_operator '(' expression ')' opt_array binary_operator • expression

    '-'  shift, and go to state 178
    '+'  shift, and go to state 179
    '!'  shift, and go to state 180
    '~'  shift, and go to state 181

    $default  reduce using rule 43 (opt_unary_operator)

    unary_operator      go to state 182
    opt_unary_operator  go to state 183
    expression          go to state 373


State 352

   46 fn_call: var '(' args ')' opt_array •

    $default  reduce using rule 46 (fn_call)


State 353

  139 opt_else_statement: ELSE conditional_body •

    $default  reduce using rule 139 (opt_else_statement)


State 354

  146 range_for_statement: FOR '(' type ID ':' val ')' • conditional_body

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 374
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 355

  117 assignment_statement: var • assignment
  119 statement_pm_1: var • unary_special_operator

    INCREMENT                  shift, and go to state 95
    DECREMENT                  shift, and go to state 96
    SELF_UNSIGNED_RIGHT_SHIFT  shift, and go to state 138
    SELF_LEFT_SHIFT            shift, and go to state 139
    SELF_RIGHT_SHIFT           shift, and go to state 140
    SELF_PLUS                  shift, and go to state 143
    SELF_MINUS                 shift, and go to state 144
    SELF_DIV                   shift, and go to state 145
    SELF_MOD                   shift, and go to state 146
    SELF_TIMES                 shift, and go to state 147
    SELF_BITWISE_AND           shift, and go to state 148
    SELF_BITWISE_OR            shift, and go to state 149
    SELF_BITWISE_XOR           shift, and go to state 150
    '='                        shift, and go to state 161

    unary_special_operator  go to state 375
    assignment_operator     go to state 174
    assignment              go to state 376


State 356

  118 statement_pm_1: unary_special_operator • var

    ID  shift, and go to state 196

    var  go to state 377


State 357

  144 for_updating_statement: assignment_statement •

    $default  reduce using rule 144 (for_updating_statement)


State 358

  143 for_updating_statement: statement_pm_1 •

    $default  reduce using rule 143 (for_updating_statement)


State 359

  145 for_statement: FOR '(' statement_declarative ';' expression ';' for_updating_statement • ')' conditional_body

    ')'  shift, and go to state 378


State 360

  150 do_while_statement: DO '{' statement_seq '}' WHILE '(' error • ')' ';'

    ')'  shift, and go to state 379


State 361

  149 do_while_statement: DO '{' statement_seq '}' WHILE '(' condition • ')' ';'

    ')'  shift, and go to state 380


State 362

  155 case_val: CHARACTER •

    $default  reduce using rule 155 (case_val)


State 363

  152 case_val: INTEGER •

    $default  reduce using rule 152 (case_val)


State 364

  153 case_val: TRUE •

    $default  reduce using rule 153 (case_val)


State 365

  154 case_val: FALSE •

    $default  reduce using rule 154 (case_val)


State 366

  156 switch_label: CASE case_val •

    $default  reduce using rule 156 (switch_label)


State 367

  158 case_block: switch_label ':' • opt_statement_seq

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 105
    ';'        shift, and go to state 106

    CASE     reduce using rule 131 (opt_statement_seq)
    DEFAULT  reduce using rule 131 (opt_statement_seq)
    '}'      reduce using rule 131 (opt_statement_seq)

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 110
    opt_statement_seq       go to state 381
    statement_seq           go to state 112
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 368

  159 switch_body: case_block switch_body •

    $default  reduce using rule 159 (switch_body)


State 369

  151 switch_statement: SWITCH '(' condition ')' '{' switch_body '}' •

    $default  reduce using rule 151 (switch_statement)


State 370

   97 new_initialisation: ARRAY opt_array_type '{' args '}' •

    $default  reduce using rule 97 (new_initialisation)


State 371

   96 new_initialisation: '[' expression ']' opt_array opt_array_type •

    $default  reduce using rule 96 (new_initialisation)


State 372

   91 statement_s2: '.' val rhs •

    $default  reduce using rule 91 (statement_s2)


State 373

   75 expression: opt_unary_operator '(' expression ')' opt_array binary_operator expression •

    $default  reduce using rule 75 (expression)


State 374

  146 range_for_statement: FOR '(' type ID ':' val ')' conditional_body •

    $default  reduce using rule 146 (range_for_statement)


State 375

  119 statement_pm_1: var unary_special_operator •

    $default  reduce using rule 119 (statement_pm_1)


State 376

  117 assignment_statement: var assignment •

    $default  reduce using rule 117 (assignment_statement)


State 377

  118 statement_pm_1: unary_special_operator var •

    $default  reduce using rule 118 (statement_pm_1)


State 378

  145 for_statement: FOR '(' statement_declarative ';' expression ';' for_updating_statement ')' • conditional_body

    error      shift, and go to state 93
    ID         shift, and go to state 94
    INCREMENT  shift, and go to state 95
    DECREMENT  shift, and go to state 96
    RETURN     shift, and go to state 97
    IF         shift, and go to state 98
    FOR        shift, and go to state 99
    WHILE      shift, and go to state 100
    DO         shift, and go to state 101
    SWITCH     shift, and go to state 102
    NEW        shift, and go to state 103
    '('        shift, and go to state 104
    '{'        shift, and go to state 80
    ';'        shift, and go to state 106

    unary_special_operator  go to state 107
    statement_s0            go to state 108
    new_expression          go to state 109
    statement               go to state 306
    block                   go to state 307
    conditional_body        go to state 382
    if_statement            go to state 113
    for_statement           go to state 114
    range_for_statement     go to state 115
    while_statement         go to state 116
    do_while_statement      go to state 117
    switch_statement        go to state 118
    return_statement        go to state 119


State 379

  150 do_while_statement: DO '{' statement_seq '}' WHILE '(' error ')' • ';'

    ';'  shift, and go to state 383


State 380

  149 do_while_statement: DO '{' statement_seq '}' WHILE '(' condition ')' • ';'

    ';'  shift, and go to state 384


State 381

  158 case_block: switch_label ':' opt_statement_seq •

    $default  reduce using rule 158 (case_block)


State 382

  145 for_statement: FOR '(' statement_declarative ';' expression ';' for_updating_statement ')' conditional_body •

    $default  reduce using rule 145 (for_statement)


State 383

  150 do_while_statement: DO '{' statement_seq '}' WHILE '(' error ')' ';' •

    $default  reduce using rule 150 (do_while_statement)


State 384

  149 do_while_statement: DO '{' statement_seq '}' WHILE '(' condition ')' ';' •

    $default  reduce using rule 149 (do_while_statement)
